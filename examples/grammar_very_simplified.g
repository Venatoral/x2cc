TYPE -> int
TYPE -> char
TYPE -> TYPE *

VAR_DECLARE -> TYPE id ASSIGNMENT ;

EXPRESSION -> EXPRESSION + EXPRESSION
EXPRESSION -> EXPRESSION - EXPRESSION
EXPRESSION -> EXPRESSION * EXPRESSION
EXPRESSION -> EXPRESSION / EXPRESSION
EXPRESSION -> ( EXPRESSION )
EXPRESSION -> id
EXPRESSION -> char
EXPRESSION -> number
EXPRESSION -> string
EXPRESSION -> false
EXPRESSION -> true


ASSIGNMENT -> id = EXPRESSION

FUN_DECLARE -> TYPE id ( ARGLIST )

FUND_EFINITION -> TYPE id ( ARGLIST ) { STATEMENT_LIST }

CALL_STATEMENT -> id ( VALIST )
CALL_STATEMENT -> id ( )

RETURN_STATEMENT -> return EXPRESSION

IF_STATEMENT -> if ( EXPRESSION ) { STATEMENT_LIST } else { STATEMENT_LIST }
WHILE_STATEMENT -> while ( EXPRESSION ) { STATEMENT_LIST }

VALIST -> VALIST , VALID
VALIST -> VALID

STATEMENT -> ASSIGNMENT ;
STATEMENT -> empty ;
STATEMENT -> CALL_STATEMENT ;

STATEMENT_LIST -> STATEMENT
STATEMENT_LIST -> STATEMENT_LIST STATEMENT

C -> FUN_DEFINITION
C -> FUN_DECLARE
C -> VAR_DECLARE