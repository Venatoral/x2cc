TYPE -> int
TYPE -> char

VAR_DECLARE -> TYPE id ASSIGNMENT ;

#值还可以由表达式构成
#后面我们将会解释为什么不需要对表达式类型进行细分,比如bool表达式
EXPRESSION -> EXPRESSION + EXPRESSION
EXPRESSION -> EXPRESSION - EXPRESSION
EXPRESSION -> EXPRESSION * EXPRESSION
EXPRESSION -> EXPRESSION / EXPRESSION
EXPRESSION -> ( EXPRESSION )
EXPRESSION -> id
EXPRESSION -> char
EXPRESSION -> number  #目前只有整数
EXPRESSION -> string
EXPRESSION -> false
EXPRESSION -> true


ASSIGNMENT -> id = EXPRESSION #a=b a='c'

FUN_DECLARE -> TYPE id ( ARGLIST ) ;

#函数 由变量定义,变量声明, 赋值语句,if语句,while语句,函数调用构成
FUND_EFINITION -> TYPE id ( ARGLIST ) { STATEMENT_LIST }

CALL_STATEMENT -> id ( VALIST )
CALL_STATEMENT -> id ( )

RETURN_STATEMENT -> return EXPRESSION

IF_STATEMENT -> if ( EXPRESSION ) { STATEMENT_LIST } else { STATEMENT_LIST }
WHILE_STATEMENT -> while ( EXPRESSION ) { STATEMENT_LIST }

VALIST -> VALIST , VALID
VALIST -> VALID

STATEMENT -> ASSIGNMENT ;
STATEMENT -> empty ;
STATEMENT -> CALL_STATEMENT ;

STATEMENT_LIST -> STATEMENT
STATEMENT_LIST -> STATEMENT_LIST STATEMENT

#源程序由函数定义,函数声明,全局变量定义,全局变量声明构成.

C -> FUN_DEFINITION
C -> FUN_DECLARE
C -> VAR_DECLARE